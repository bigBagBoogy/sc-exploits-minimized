// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;
// 1 import the test framework

import {Test, console2} from "forge-std/Test.sol";
// 2 import the contract
import {DoS} from "src/denial-of-service/DoS.sol";
// 3 create a test contract and have it inherit from the test framework

contract DoSHennyTest is Test {
    // 4 create an instance of the contract

    DoS dos;

    // 5 create the variables that will be used in the test
    address warmerUpper = makeAddr("warmerUpper");
    address player1 = makeAddr("player1");
    address player2 = makeAddr("player2");
    address player3 = makeAddr("player3");
    address player4 = makeAddr("player4");

    // 6 create the setUp function
    function setUp() public {
        // 7 deploy the contract
        dos = new DoS();
    }
    // 8 declare the test function with the test keyword prefixed

    function test_feesRijzenDePanUit() public {
        // arrange
        vm.prank(warmerUpper);
        dos.enter();
        // act
        uint256 gasCostStart1 = gasleft();
        vm.prank(player1);
        dos.enter();
        uint256 gasCostEnd1 = gasCostStart1 - gasleft();

        uint256 gasCostStart2 = gasleft();
        vm.prank(player2);
        dos.enter();
        uint256 gasCostEnd2 = gasCostStart2 - gasleft();

        uint256 gasCostStart3 = gasleft();
        vm.prank(player3);
        dos.enter();
        uint256 gasCostEnd3 = gasCostStart3 - gasleft();

        uint256 gasCostStart4 = gasleft();
        vm.prank(player4);
        dos.enter();
        uint256 gasCostEnd4 = gasCostStart4 - gasleft();

        console2.log("gasCostEnd1: ", gasCostEnd1);
        console2.log("gasCostEnd2: ", gasCostEnd2);
        console2.log("gasCostEnd3: ", gasCostEnd3);
        console2.log("gasCostEnd4: ", gasCostEnd4);

        // assert
        assert(gasCostEnd2 > gasCostEnd1);
        assert(gasCostEnd3 > gasCostEnd2);
        assert(gasCostEnd4 > gasCostEnd3);
    }
}
