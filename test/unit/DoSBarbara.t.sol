// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;
// 1 import the test framework

import {Test, console2} from "forge-std/Test.sol";

// 2 import the contract
import {DoS} from "src/denial-of-service/DoS.sol";

// 3 create a test contract and have it inherit from the test framework

contract DoSBarbara is Test {
    // 4 create an instance of the contract
    DoS public dos;

    // 5 create the variables that will be used in the test
    address warmUpUser = makeAddr("warmUpUser");
    address personFirst = makeAddr("personFirst");
    address[] public users; //  in between personFirst and personLast are 100 users
    address personLast = makeAddr("personLast");

    // 6 create the setUp function
    function setUp() public {
        // 7 deploy the contract
        dos = new DoS();
        users = new address[](100);
        for (uint256 i = 0; i < users.length; i++) {
            users[i] = makeAddr(string(abi.encodePacked("user", i)));
        }
    }

    // 8 declare the test function with the test keyword prefixed
    // create a warmUp user
    // create 100 users in a loop
    function test_FeesInflateOverTime() public {
        // arrange
        vm.prank(warmUpUser);
        dos.enter();

        uint256 gasBefore = gasleft();
        vm.prank(personFirst);
        dos.enter();
        uint256 gasAfterPersonFirst = gasBefore - gasleft();

        for (uint256 i = 0; i < users.length; i++) {
            vm.prank(users[i]);
            dos.enter();
        }

        uint256 gasBeforeLastPerson = gasleft();
        vm.prank(personLast);
        dos.enter();
        uint256 gasAfterPersonLast = gasBeforeLastPerson - gasleft();

        // assert
        console2.log(gasAfterPersonFirst);
        console2.log(gasAfterPersonLast);

        assert(gasAfterPersonLast > gasAfterPersonFirst);
    }
}
