// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;
// 1 import the test framework

import {Test, console2} from "forge-std/Test.sol";
// 2 import the contract
import {DoS} from "../../src/denial-of-service/DoS.sol";

// 3 create a test contract and have it inherit from the test framework
contract DoSmaartenTest is Test {
    // 4 create an instance of the contract
    DoS public dos;
    // 5 create the variables that will be used in the test
    address starterWarmUp = makeAddr("starterAddress");
    address playerA = makeAddr("playerA");
    address playerB = makeAddr("playerB");
    address playerC = makeAddr("playerC");

    // 6 create the setUp function
    function setUp() public {
        // 7 deploy the contract
        dos = new DoS();
    }

    // we want to have a bunch of peeps enter the raffle
    // we want to keep track of gas usage
    // 💡 gasleft() returns (uint256): remaining gas
    // gas is not gasCost!!! it's gasLeft. gasCost is gasUsed * gasPrice
    // The fact that this function logs the gas as a positive number is
    // correct, albeit a bit confusing.
    // ❗ The function gasleft was previously known as msg.gas,
    // which was deprecated in version 0.4.21 and removed in version 0.5.0.

    // 8 declare the test function with the test keyword prefixed
    function testGasfeesGetIncreasinglyHigh() public {
        // arrange
        vm.prank(starterWarmUp);
        dos.enter();
        // act
        uint256 gasBeforeA = gasleft();
        vm.prank(playerA);
        dos.enter();
        uint256 gasAfterA = gasBeforeA - gasleft();

        uint256 gasBeforeB = gasleft();
        vm.prank(playerB);
        dos.enter();
        uint256 gasAfterB = gasBeforeB - gasleft();

        uint256 gasBeforeC = gasleft();
        vm.prank(playerC);
        dos.enter();
        uint256 gasAfterC = gasBeforeC - gasleft();

        // assert

        console2.log("Gas cost A: %s", gasAfterA);
        console2.log("Gas cost B: %s", gasAfterB);
        console2.log("Gas cost C: %s", gasAfterC);
        // The gas cost will just keep rising, making it harder and harder for new people to enter!
        assert(gasAfterC > gasAfterB);
        assert(gasAfterB > gasAfterA);
    }
}
