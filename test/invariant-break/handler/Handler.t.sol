// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {HandlerStatefulFuzzCatches} from "src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "test/mocks/MockUSDC.sol";
import {YeildERC20} from "test/mocks/YeildERC20.sol";

// this contracy will act as a wrapper around the Test contract
contract Handler is Test {
    HandlerStatefulFuzzCatches hsf;
    MockUSDC public mockUSDC;
    YeildERC20 public yeildERC20;
    address user;

    constructor(HandlerStatefulFuzzCatches _hsf, MockUSDC _mockUSDC, YeildERC20 _yeildERC20, address _user) {
        hsf = _hsf;
        mockUSDC = _mockUSDC;
        yeildERC20 = _yeildERC20;
        user = _user;
    }

    function depositYeildERC20(uint256 _amount) public {
        _amount = bound(_amount, 0, yeildERC20.balanceOf(user));
        vm.startPrank(user);
        yeildERC20.approve(address(hsf), _amount);
        hsf.depositToken(yeildERC20, _amount);
        vm.stopPrank();
    }

    function depositMockUSDC(uint256 _amount) public {
        _amount = bound(_amount, 0, mockUSDC.balanceOf(user));
        vm.startPrank(user);
        mockUSDC.approve(address(hsf), _amount);
        hsf.depositToken(mockUSDC, _amount);
        vm.stopPrank();
    }

    function withdrawYeildERC20() public {
        vm.startPrank(user);
        hsf.withdrawToken(yeildERC20);
        vm.stopPrank();
    }

    function withdrawMockUSDC() public {
        vm.startPrank(user);
        hsf.withdrawToken(mockUSDC);
        vm.stopPrank();
    }
}
