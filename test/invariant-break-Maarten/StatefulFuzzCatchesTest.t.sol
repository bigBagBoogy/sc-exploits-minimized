// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StatefulFuzzCatches} from "src/invariant-break/StatefulFuzzCatches.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";

contract StateFullFuzzCatchesTest is StdInvariant, Test {
    StatefulFuzzCatches sfc;

    function setUp() public {
        sfc = new StatefulFuzzCatches();
        targetContract(address(sfc));
    }

    function test_doMoreMathAgain(uint128 randomNumber) public {
        assert(sfc.doMoreMathAgain(randomNumber) != 0);
    }

    // below we run the same test, only now with a stateful test
    // notice that we now check for the value of sfc.storedValue().
    // this is because we now have a stateful test and the value of each run is
    // persisted across runs. We are checking that the value of storedValue in
    // any run is not 0.
    function statefulFuzz_catchesInvariant() public view {
        assert(sfc.storedValue() != 0);
    }
}
