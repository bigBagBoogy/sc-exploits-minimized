// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {Registry} from "./Registry.sol";

contract RegistryTest is Test {
    Registry registry;
    address alice;

    function setUp() public {
        alice = makeAddr("alice");

        registry = new Registry();
    }

    function test_register() public {
        uint256 amountToPay = registry.PRICE();

        vm.deal(alice, amountToPay);
        vm.startPrank(alice);

        uint256 aliceBalanceBefore = address(alice).balance;

        registry.register{value: amountToPay}();

        uint256 aliceBalanceAfter = address(alice).balance;

        assertTrue(registry.isRegistered(alice), "Did not register user");
        assertEq(address(registry).balance, registry.PRICE(), "Unexpected registry balance");
        assertEq(aliceBalanceAfter, aliceBalanceBefore - registry.PRICE(), "Unexpected user balance");
    }

    /**
     * Almost the same test, but this time fuzzing amountToPay detects the bug (the Registry contract is not giving back the change)
     */
    function test_fuzz_registerBBB(uint256 amountToPay) public {
        vm.assume(amountToPay >= 1 ether);
        vm.deal(alice, amountToPay); // now that we get `amountToPay` as an argument from the fuzzer, we should at least expect some reverts on the amount not meeting the registry.PRICE(). When trying this, we indeed see it revert. The fuzzer very early on tries to pass `0` as `amountToPay`. Instinct may be to write a handler to bound the amountToPay value between 1 ether and uint256.max. Tincho, however, cleverly makes use of the cheatcode vm.assume to do this.
        vm.startPrank(alice);

        uint256 aliceBalanceBefore = address(alice).balance;
        registry.register{value: amountToPay}();
        uint256 aliceBalanceAfter = address(alice).balance;

        assertTrue(registry.isRegistered(alice), "Did not register user");
        assertEq(address(registry).balance, registry.PRICE(), "Unexpected registry balance");
        assertEq(aliceBalanceAfter, aliceBalanceBefore - registry.PRICE(), "Unexpected user balance");
    }
}
