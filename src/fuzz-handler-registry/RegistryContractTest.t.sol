// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {RegistryContract} from "./RegistryContract.sol";
import {Handler} from "./Handler.t.sol";

contract RegistryContractTest is Test {
    RegistryContract registryContract;
    address alice;

    function setUp() public {
        alice = makeAddr("alice");

        registryContract = new RegistryContract();
    }

    function test_register() public {
        uint256 amountToPay = registryContract.PRICE();

        vm.deal(alice, amountToPay);
        vm.startPrank(alice);

        uint256 aliceBalanceBefore = address(alice).balance;

        registryContract.register{value: amountToPay}();

        uint256 aliceBalanceAfter = address(alice).balance;

        assertTrue(registryContract.isRegistered(alice), "Did not register user");
        assertEq(address(registryContract).balance, registryContract.PRICE(), "Unexpected registry balance");
        assertEq(aliceBalanceAfter, aliceBalanceBefore - registryContract.PRICE(), "Unexpected user balance");
    }

    /**
     * Almost the same test, but this time fuzzing amountToPay detects the bug (the Registry contract is not giving back the change)
     */
    function invariant_register(uint256 amountToPay) public {
        // vm.assume(amountToPay >= 1 ether); We'll now rebuild this with a Handler

        vm.deal(alice, amountToPay);
        vm.startPrank(alice);

        uint256 aliceBalanceBefore = address(alice).balance;

        registryContract.register{value: amountToPay}();

        uint256 aliceBalanceAfter = address(alice).balance;

        assertTrue(registryContract.isRegistered(alice), "Did not register user");
        assertEq(address(registryContract).balance, registryContract.PRICE(), "Unexpected registryContract balance");
        assertEq(aliceBalanceAfter, aliceBalanceBefore - registryContract.PRICE(), "Unexpected user balance");
    }
}
