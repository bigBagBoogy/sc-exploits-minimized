// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {RegistryContract} from "./RegistryContract.sol";
import {Handler} from "./Handler.t.sol";

contract RegistryContractTest is Test {
    RegistryContract registryContract;
    Handler public handler;
    address alice;

    function setUp() public {
        registryContract = new RegistryContract();
        handler = new Handler(registryContract);

        targetContract(address(handler)); // Set the target, only run tests on this contract
        bytes4[] memory selectors = new bytes4[](1);
        selectors[0] = handler.register.selector;
        targetSelector(FuzzSelector({addr: address(handler), selectors: selectors})); // this is optional an restricts the functions to be tested
    }

    /**
     * Almost the same test, but this time fuzzing amountToPay detects the bug (the Registry contract is not giving back the change)
     */
    function invariant_register_always_works() public {
        assertTrue(registryContract.isRegistered(alice), "Did not register user");
        assertEq(address(registryContract).balance, registryContract.PRICE(), "Unexpected registryContract balance");
        assertEq(
            handler.aliceBalanceAfter(),
            handler.aliceBalanceBefore() - registryContract.PRICE(),
            "Unexpected user balance"
        );
    }
}
