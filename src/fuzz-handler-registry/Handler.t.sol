// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {RegistryContract} from "./RegistryContract.sol";

contract Handler is Test {
    RegistryContract public rc;

    uint256 public aliceBalanceBefore;
    uint256 public aliceBalanceAfter;

    constructor(RegistryContract _rc) {
        rc = _rc;
    }

    // fallback:
    receive() external payable {}

    function register(uint256 amount) public {
        amount = bound(amount, 1 ether, 2 ether);
        address alice = makeAddr("alice");
        vm.deal(alice, type(uint256).max);
        console2.log("alice's balance: ", address(alice).balance);
        vm.startPrank(alice);
        aliceBalanceBefore = address(alice).balance;
        rc.register{value: amount}();
        aliceBalanceAfter = address(alice).balance;
    }
}
